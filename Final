var drawBitmojiIlanna = function(bitx,bity,bitHeight){
    //bitmojiHead
    noStroke();
    fill(117, 91, 77);
    rect(bitx-(bitHeight/150*98),bity-(bitHeight/150*65),bitHeight/150*116,bitHeight/150*114);//hair
   
    fill(255, 242, 222);
    rect(bitx-bitHeight/150*54,bity-bitHeight/150*9,bitHeight/150*25,bitHeight/150*17);//neck
    fill(117, 91, 77);
    ellipse(bitx-bitHeight/150*40,bity-bitHeight/150*70,bitHeight/150*116,bitHeight/150*106);//hair
    fill(255, 242, 222);
    ellipse(bitx-bitHeight/150*42,bity-bitHeight/150*54,bitHeight/150*87,bitHeight/150*96);//head
   
    fill(117, 91, 77);
    arc(bitx-bitHeight/150*78, bity-bitHeight/150*109, bitHeight/150*76, bitHeight/150*86, -7, 101);
    arc(bitx, bity-bitHeight/150*109, bitHeight/150*86, bitHeight/150*86, 89, 187);
    //hair
   
    fill(117, 91, 77);
    rect(bitx-bitHeight/150*67,bity-bitHeight/150*65,bitHeight/150*15,bitHeight/150*3);
    rect(bitx-bitHeight/150*33,bity-bitHeight/150*65,bitHeight/150*15,bitHeight/150*3);
   
    fill(250, 250, 250);
    ellipse(bitx-bitHeight/150*59,bity-bitHeight/150*54,bitHeight/150*-22,bitHeight/150*7);
    ellipse(bitx-bitHeight/150*24,bity-bitHeight/150*54,bitHeight/150*-22,bitHeight/150*7);
    fill(100, 144, 173);
    ellipse(bitx-bitHeight/150*59,bity-bitHeight/150*54,bitHeight/150*9,bitHeight/150*8);
    ellipse(bitx-bitHeight/150*25,bity-bitHeight/150*54,bitHeight/150*9,bitHeight/150*8);//eyes
   
    fill(242, 222, 191);
    bezier(bitx-bitHeight/150*43, bity-bitHeight/150*54, bitx-bitHeight/150*16, bity-bitHeight/150*33, bitx-bitHeight/150*45, bity-bitHeight/150*35, bitx-bitHeight/150*45, bity-bitHeight/150*36);//nose
   
    fill(240, 195, 215);
    arc(bitx-bitHeight/150*41, bity-bitHeight/150*28, bitHeight/150*32, bitHeight/150*23, 2, 182);//mouth
   
    fill(255, 242, 222);
    arc(bitx, bity-bitHeight/150*52, bitHeight/150*19, bitHeight/150*18, 276, 451);//right ear
    arc(bitx-bitHeight/150*84, bity-bitHeight/150*52, bitHeight/150*19, bitHeight/150*18, 440, 641);//left ear

    //bitmojiBody
fill(255, 255, 255);
    ellipse(bitx+bitHeight/150*2,bity-bitHeight/150*51,bitHeight/150*13,bitHeight/150*9);
    rect(bitx+bitHeight/150*3,bity-bitHeight/150*49,bitHeight/150*5,bitHeight/150*16);//right airpod
    ellipse(bitx-bitHeight/150*87,bity-bitHeight/150*51,bitHeight/150*13,bitHeight/150*9);
    rect(bitx-bitHeight/150*92,bity-bitHeight/150*49,bitHeight/150*5,bitHeight/150*16);//left airpod
   
    fill(16, 14, 112);//dark blue
    rect(bitx-bitHeight/150*117,bity+bitHeight/150*9,bitHeight/150*161,bitHeight/150*78);//shirt
   
    fill(255, 242, 222);
    ellipse(bitx-bitHeight/150*41,bity+bitHeight/150*4,bitHeight/150*26,bitHeight/150*28);//collar
   
    stroke(0, 0, 0);
    strokeWeight(3);
    line(bitx-bitHeight/150*89,bity+bitHeight/150*36,bitx-bitHeight/150*89,bity+bitHeight/150*83);//left arm
    line(bitx+bitHeight/150*11,bity+bitHeight/150*36,bitx+bitHeight/150*11,bity+bitHeight/150*83);//right arm
   
    stroke(53, 181, 240);
    line(bitx-bitHeight/150*69,bity+bitHeight/150*40,bitx-bitHeight/150*43,bity+bitHeight/150*40);
    line(bitx-bitHeight/150*69,bity+bitHeight/150*52,bitx-bitHeight/150*43,bity+bitHeight/150*52);
    line(bitx-bitHeight/150*55,bity+bitHeight/150*41,bitx-bitHeight/150*55,bity+bitHeight/150*50);//I
    line(bitx-bitHeight/150*15,bity+bitHeight/150*52,bitx-bitHeight/150*32,bity+bitHeight/150*52);
    line(bitx-bitHeight/150*32,bity+bitHeight/150*39,bitx-bitHeight/150*32,bity+bitHeight/150*50);//L
};//Ilanna Bitmoji Code
var drawBitmojiKishan = function (bitmojiX, bitmojiY, bitmojiH){
       
        var drawHead = function (bitmojiX, bitmojiY, bitmojiH){
                    fill(209, 156, 113);
                    arc(bitmojiX + bitmojiH / 80 * 49, bitmojiY + bitmojiH / 80 * 74, bitmojiH / 80 * 22, bitmojiH / 80 * 17, 92, 269);//left ear
                    arc(bitmojiX + bitmojiH / 80 * 109, bitmojiY + bitmojiH / 80 * 74, bitmojiH / 80 * 22, bitmojiH / 80 * 17, 273, 450);//right ear
                    fill(209, 156, 113); //head
                    ellipse(bitmojiX +bitmojiH / 80 * 80, bitmojiY + bitmojiH / 80 * 74, bitmojiH / 80 * 70,bitmojiH / 80 *  80);
                    noStroke();
                    arc(bitmojiX +bitmojiH / 80 *  80, bitmojiY + bitmojiH / 80 * 110,bitmojiH / 80 *  23, bitmojiH / 80 * 13,-0, 180);//chin
           };
           
           var drawFace = function (bitmojiX, bitmojiY, bitmojiH){
                    fill(77, 62, 42); //eyes
                    ellipse(bitmojiX + bitmojiH / 80 * 93, bitmojiY + bitmojiH / 80 * 67, bitmojiH / 80 * 7,bitmojiH / 80 * 7); // Right Eye
                    ellipse(bitmojiX + bitmojiH / 80 * 67, bitmojiY + bitmojiH / 80 * 67, bitmojiH / 80 * 7,bitmojiH / 80 * 7); // Left Eye
                    quad(bitmojiX + bitmojiH / 80 * 44, bitmojiY + bitmojiH / 80 * 74, bitmojiX + bitmojiH / 80 * 46, bitmojiY + bitmojiH / 80 * 34,bitmojiX + bitmojiH / 80 *  84, bitmojiY + bitmojiH / 80 * 34,bitmojiX +bitmojiH / 80 * 57, bitmojiY + bitmojiH / 80 * 55); //hair
                    quad(bitmojiX + bitmojiH / 80 * 115, bitmojiY +bitmojiH / 80 * 61, bitmojiX + bitmojiH / 80 * 95, bitmojiY + bitmojiH / 80 * 34, bitmojiX + bitmojiH / 80 * 84,  bitmojiY + bitmojiH / 80 * 34,bitmojiX + bitmojiH / 80 * 57,bitmojiY + bitmojiH / 80 * 55);
                     strokeWeight(1);//mouth
                    fill(255, 255, 255);
                    arc(bitmojiX + bitmojiH / 80 * 80, bitmojiY + bitmojiH / 80 * 96, bitmojiH / 80 * 31, bitmojiH / 80 * 13, 0, 180);//bottom of mouth
                    line(bitmojiX + bitmojiH / 80 * 95, bitmojiY + bitmojiH / 80 * 95, bitmojiX + bitmojiH / 80 * 64, bitmojiY + bitmojiH / 80 * 95);//top of mouth
                    stroke(0, 0, 0);
                    noFill();//nose
                    arc(bitmojiX + bitmojiH / 80 * 81, bitmojiY + bitmojiH / 80 * 82, bitmojiH / 80 * 20, bitmojiH / 80 * 14, 293, 447);
           };
           
            var drawBody = function (bitmojiX, bitmojiY, bitmojiH){
               
                    fill(207, 154, 114);//neck
                    quad (bitmojiX + bitmojiH / 80 * 95, bitmojiY +bitmojiH / 80 * 123,bitmojiX + bitmojiH / 80 *95, bitmojiY + bitmojiH / 80 *110,bitmojiX + bitmojiH / 80 *65, bitmojiY + bitmojiH / 80 *109,bitmojiX + bitmojiH / 80 *65, bitmojiY + bitmojiH / 80 *123);
                    strokeWeight(1);
                    stroke(0, 0, 0); //neck
                    line(bitmojiX + bitmojiH / 80 *65, bitmojiY + bitmojiH / 80 *109,bitmojiX + bitmojiH / 80 *65, bitmojiY + bitmojiH / 80 *120);
                    line(bitmojiX + bitmojiH / 80 *95, bitmojiY + bitmojiH / 80 *109,bitmojiX + bitmojiH / 80 *95, bitmojiY + bitmojiH / 80 *123);
                    fill(0, 0, 0);
                    arc(bitmojiX + bitmojiH / 80 *80, bitmojiY + bitmojiH / 80 *137, bitmojiH / 80 *124, bitmojiH / 80 *31, 180, 360);//shoulder
                   
            };
           
            var drawHat = function (bitmojiX, bitmojiY, bitmojiH){
               
                    strokeWeight(3);
                    stroke(0, 0, 0);// hat
                    beginShape();
                    fill(212, 212, 212);
                    vertex (bitmojiX + bitmojiH / 80 *79, bitmojiY + bitmojiH / 80 *12);
                    vertex (bitmojiX + bitmojiH / 80 *48, bitmojiY + bitmojiH / 80 *31);
                    vertex(bitmojiX + bitmojiH / 80 *79, bitmojiY + bitmojiH / 80 *12);
                    vertex(bitmojiX + bitmojiH / 80 *109, bitmojiY + bitmojiH / 80 *30);
                    vertex(bitmojiX + bitmojiH / 80 *109,bitmojiY + bitmojiH / 80 * 50);
                    vertex(bitmojiX + bitmojiH / 80 *49,bitmojiY + bitmojiH / 80 * 50);
                    vertex(bitmojiX + bitmojiH / 80 *49,bitmojiY + bitmojiH / 80 * 30);
                    endShape();
                   
                    strokeWeight(bitmojiH / 80 *1.5);
                    fill(212, 212, 212);
                   
                    quad(bitmojiX + bitmojiH / 80 *42,bitmojiY + bitmojiH / 80 *58,bitmojiX + bitmojiH / 80 *42, bitmojiY + bitmojiH / 80 *42, bitmojiX + bitmojiH / 80 *48, bitmojiY + bitmojiH / 80 *32, bitmojiX + bitmojiH / 80 *48,bitmojiY + bitmojiH / 80 *52);
                   
                    strokeWeight(bitmojiH / 80 * 5 ); //brim of hat
                    stroke(89, 89, 89);
                    noFill();
                    arc(bitmojiX + bitmojiH / 80 *80, bitmojiY + bitmojiH / 80 *63, bitmojiH / 80 *76, bitmojiH / 80 *30, -180, 0);
                    stroke(94, 94, 94);
                    fill(0, 0, 0);
                    text("KP", bitmojiX + bitmojiH / 80 *72, bitmojiY + bitmojiH / 80 *31, bitmojiH / 80 *30,bitmojiH / 80 *50);
                    strokeWeight(1);
            };
                drawBody(bitmojiX, bitmojiY, bitmojiH);
                drawHead (bitmojiX, bitmojiY, bitmojiH);
                drawFace(bitmojiX, bitmojiY, bitmojiH);
                drawHat(bitmojiX, bitmojiY, bitmojiH);  
            };//Kishan Bitmoji Code

var currentScene = 0; //0=splash screen, 1=game screen, 2=How to screen
var playerHand = []; //holds player's card values as they are added to their hand
var dealerHand = []; //holds dealer's card values as they are added to their hand
var pHandValue = 0; //the sum of the cards in the player's hand
var dHandValue = 0; //the sum of the cards in the dealer's hand

var stand = function(){
    var dealerCards = 1;
    for (var dealerCards = 1; dealerCards <= 5; dealerCards++){
        
        //compares hand value to decide if dealer should hit
        if (dHandValue < pHandValue){
          dealerHand.push(round((random(1,11))));//adds card to dealer hand
          dHandValue += dealerHand[dealerCards];//updated dealer's hand value
        }
    }
};

//Kahn Button class
var Button = function(config) {
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.width = config.width || 95;
    this.height = config.height || 50;
    this.label = config.label || "Click";
    this.bg = config.bg || color(229, 115, 235);
    this.onClick = config.onClick || function() {};
    this.num = config.num || " "; //number can now be added to button to imitate card
    this.txtcolor = config.txtcolor || color(0, 0, 0);//txt color default is black
};

Button.prototype.draw = function() {
    noStroke();
    fill(this.bg);
    rect(this.x, this.y, this.width, this.height, 5);
    fill(this.txtcolor);
    textSize(13);
    textAlign(LEFT, TOP);
    text(this.label, this.x+10, this.y+this.height/3);
    //chosen button value is draw in top left and bottom right corners
    text(this.num, this.x+4, this.y+this.height/40);
    text(this.num, this.x+56, this.y+70);
};

Button.prototype.isMouseInside = function() {//boolean true if mouse over button, else false
    return mouseX > this.x &&
           mouseX < (this.x + this.width) &&
           mouseY > this.y &&
           mouseY < (this.y + this.height);
};

Button.prototype.handleMouseClick = function() {
    if (this.isMouseInside()) {
        this.onClick();
    }
};

//pushes 2 random values(cards) to player hand and 1 to dealer handd
var firstDeal = function(){ 
    for (var i = 0; i < 2; i++){
        playerHand.push(round((random(1,11))));
    }
    dealerHand.push(round((random(1,11))));
};

//start button
var startButton = new Button({
    x: 307,
    y: 132,
    width: 72,
    height: 94,
    label: " START",
    bg: color(255, 255, 255),
    num: "A",
    onClick: function() {
        firstDeal();
        currentScene = 1; //changes to gamescreen when clicked
        //finds sum of player and dealer's first 2 cards
        pHandValue = playerHand[0] + playerHand[1];
        dHandValue = dealerHand[0];
    }
});

//How to Play button
var howButton = new Button({
    x: 308,
    y: 256,
    width: 72,
    height: 94,
    label: "HOW TO",
    bg: color(255, 255, 255),
    txtcolor: color(255, 0, 0),
    num: "J",
    onClick: function() {
        currentScene = 2; //changes to instruction screen when clicked
    }
});

var currentIndex = 2;//used to find needed index of playerHand

//hit button
var hitButton = new Button({
    x: 185,
    y: 175,
    label: "    HIT",
    bg: color(201, 14, 14),
    onClick: function() {
        //adds value("card") to player hand
        playerHand.push(round((random(1,11))));
        //adds new card value to total player hand value
        pHandValue += playerHand[currentIndex];
        currentIndex++;
        
    }
});

var playerDone = false;//boolean used to track if player is done with their turn

//Stand button
var standButton = new Button({
    x: 78,
    y: 175,
    label: " STAND",
    bg: color(201, 14, 14),
    onClick: function() {
        stand();
        playerDone = true;//signifies player is done with their turn
    }
});

//draws splash screen
var splashScreen = function(){
    background(47, 94, 9);
    fill(255, 255, 255);
    rect(0,0,400,101);
    fill(0, 0, 0);
    textSize(75);
    text("Black", 18, 6);
    fill(255, 0, 0);
    text("Jack!", 204, 6);
    fill(0, 0, 0);
    textSize(15);
    drawBitmojiIlanna(95,237,87);
    noStroke();
    drawBitmojiKishan(123,142,85);
    fill(226, 233, 235);
    text("By: Ilanna Langton and Kishan Patel", 79, 373);
    startButton.draw();
    howButton.draw();
};

//draws gamescreen
var gameScreen = function(){
    background(36, 69, 9);
//adding white rectangle on player's side to imitate a card dependent length of playerHand array
    if (playerHand.length === 2){
    for (var i = 0; i<160; i+=80){
        stroke(252, 252, 252);
        fill (255, 255, 255);
        rect(2+i,277,75,115);
    }
    }
    else if (playerHand.length === 3){
        for (var i = 0; i<240; i+=80){
        stroke(252, 252, 252);
        fill (255, 255, 255);
        rect(2+i,277,75,115);
    }
    }
    else if (playerHand.length === 4){
        for (var i = 0; i<320; i+=80){
        stroke(252, 252, 252);
        fill (255, 255, 255);
        rect(2+i,277,75,115);
    }
    }
    else if (playerHand.length === 5){
        for (var i = 0; i<400; i+=80){
        stroke(252, 252, 252);
        fill (255, 255, 255);
        rect(2+i,277,75,115);
    }
    }
//adding white rectangle on dealer's side to imitate a card dependent length of dealerHand array
    if (dealerHand.length === 1){//will draw dealer first card and 2nd face down
        for (var i = 0; i<160; i+=80){
            stroke(252, 252, 252);
            fill (255, 255, 255);
            rect(2+i,5,75,115);
        }
    }
    if (dealerHand.length === 2){
        for (var i = 0; i<160; i+=80){
            stroke(252, 252, 252);
            fill (255, 255, 255);
            rect(2+i,5,75,115);
        }
    }
    else if (dealerHand.length === 3){
        for (var i = 0; i<240; i+=80){
            stroke(252, 252, 252);
            fill (255, 255, 255);
            rect(2+i,5,75,115);
        }
    }
    else if (dealerHand.length === 4){
        for (var i = 0; i<320; i+=80){
            stroke(252, 252, 252);
            fill (255, 255, 255);
            rect(2+i,5,75,115);
        }
    }
    else if (dealerHand.length === 5){
        for (var i = 0; i<400; i+=80){
            stroke(252, 252, 252);
            fill (255, 255, 255);
            rect(2+i,5,75,115);
        }
    }

    hitButton.draw();//draw hit button
    standButton.draw();//draw stand button
    fill(255, 0, 0);
    textSize(40);
   
//texts dealer's card values in corresponding spot on screen   
    for (var i = 0; i<dealerHand.length; i++){
            text (dealerHand[i], 115/5+i*80, 40);
}
//texts player's card values in corresponding spot on screen
    for (var i = 0; i<playerHand.length; i++){
            text (playerHand[i], 115/5+i*80, 312);
}

fill(255, 255, 255);
textSize(13);
text("Players Hand Value: "+ pHandValue, 10,259);//adds player hand counter on screen
text("Dealers Hand Value: "+ dHandValue, 10,124);//adds dealer hand counter on screen

var Win = function (winner){//compares hand values and chooses/displays winner
    
    //used to randomly pick bitmoji to display winner text
    var dealerBit = (round((random(1,2))));
    
    if (dealerBit === 1){
        noStroke();
        drawBitmojiKishan(37,210,94);
        fill(255, 255, 255);
        ellipse (264,187,250,169);
        line(147,314,199,259);
        fill(255, 0, 0);
        textSize(20);
        text("Dealer: " + dHandValue, 192,134);
        text("Player: " + pHandValue, 192,155);
        textSize(30);
        text(winner + " WINS!", 158,182);
    } else {
        noStroke();
        drawBitmojiIlanna(144,315,103);
        fill(255, 255, 255);
        ellipse (257,191,251,162);
        line(123,295,171,251);
        fill(255, 0, 0);
        textSize(20);
        text("Dealer: " + dHandValue, 192,134);
        text("Player: " + pHandValue, 192,155);
        textSize(30);
        text(winner + " WINS!", 149,183);
    }
     textSize(16);
    
};
//checks possible outcomes then calls win function with appropriate winner
   if (pHandValue > 21){
       fill(255, 0, 0);
       noLoop();
       textSize(30);
       Win("DEALER");
   }else if (dHandValue > 21){
       fill(255, 0, 0);
       noLoop();
       textSize(30);
       Win("PLAYER");
   }else if (dHandValue === 21){
       fill(255, 0, 0);
       noLoop();
       textSize(30);
       Win("DEALER");
   }else if (pHandValue === 21 && playerDone){
       fill(255, 0, 0);
       noLoop();
       textSize(30);
       Win("PLAYER");
   }else if (dHandValue > pHandValue && playerDone){
       fill(255, 0, 0);
       noLoop();
       textSize(30);
       Win("DEALER");
   }else if(dHandValue < pHandValue && playerDone){
       fill(255, 0, 0);
       noLoop();
       textSize(30);
       Win("PLAYER");
   } else if(dHandValue === pHandValue && playerDone){
       fill(255, 0, 0);
       noLoop();
       textSize(50);
       text("Its A Draw!", 76,176);
   }
   
};

//draws instruction screen
var howScreen = function(){
    background(202, 204, 202);
    fill(255, 0, 0);
    textSize(60);
    text("How To Play", 33, 17);
    fill(0, 0, 0);
    textSize(15);
    text("To begin the player and dealer each get dealt two cards. The dealer has one card face up and one face down. Your hand has a total value based on the sum of the face value of your cards: (2 = 2, 5 = 5, A = 1 or 11, K Q J = 10). You play agaisnt the dealer and the goal of the game is to get your hand's value as close to 21 than the dealer without going over. You can do this by HITTING (adding a card to your hand from the deck) or STANDING (stopping the round when you no longer want to pick up more cards. ", 11, 110, 385, 333);
};

mouseClicked = function() { //adds corresponding button functions to current scene
    if (currentScene === 0)
    {
        startButton.handleMouseClick();
        howButton.handleMouseClick();
    }
    if (currentScene === 1){
        hitButton.handleMouseClick();
        standButton.handleMouseClick();
    }
};


draw = function() {//draws corresponding screen based on currentScene variable
    if (currentScene === 0){
        splashScreen();
    }
       
    if (currentScene === 1){
        gameScreen();
    }
   
    if (currentScene === 2){
        howScreen();
    }
};
